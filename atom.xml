<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hyacine&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-04T07:27:20.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Hyacine</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode每日一题</title>
    <link href="http://example.com/2020/11/30/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    <id>http://example.com/2020/11/30/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</id>
    <published>2020-11-30T14:31:02.000Z</published>
    <updated>2020-12-04T07:27:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><del><em>每日一题是不可能真的每日一题的，也就诓诓自己罢了</em></del></p></blockquote><h3 id="321-Create-Maximum-Number"><a href="#321-Create-Maximum-Number" class="headerlink" title="321. Create Maximum Number"></a><a href="https://leetcode-cn.com/problems/create-maximum-number/">321. Create Maximum Number</a></h3><p><del>利用动态规划的思想，对于从这两个数组中选出k个数字组成的最大数：</del></p><p><del>假设第一个数组中有x个数，可以用反证法证明这x个数组成的子序列在第一个数组中一定是最大的；第二个数组中有(k-x)个数，可以用反证法证明这(k-x)个数组成的子序列在第二个数组中也一定是最大的，即本题具有最优子结构性质。</del></p><p><del>最后遍历所有可能的x的值合并得到的最大数。</del></p><p>复盘的时候看到<a href="https://leetcode-cn.com/problems/create-maximum-number/solution/cshou-xian-qiu-jie-zi-wen-ti-zai-he-bing-zi-wen-ti/">这位大佬的题解</a>，深感自己表达能力的欠缺，在此附上：</p><blockquote><p>假设最大子序列中，包含来自nums1的s个元素和来自nums2的k-s个元素，</p><p>那么可以通过反证法证明，来自nums1的s个元素，构成了nums1的长度为s的最大子序列；来自nums2的k-s个元素，构成了nums2的长度为k-s的最大子序列。</p><p>因此，可以首先分别求出nums1中长度为s的最大子序列，和nums2中长度为k-s的最大子序列，然后求它们归并起来的最大子序列的长度，最后对一切可能的s求最大值。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">maxSequence</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; nums, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-type">int</span> len = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> res = len - x; <span class="hljs-comment">// 可以被丢弃的数字数目</span><br>        <span class="hljs-comment">// 利用单调栈进行维护</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-keyword">while</span> (ans.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span> &amp;&amp; ans.<span class="hljs-built_in">back</span>() &lt; nums[i] &amp;&amp; res &gt; <span class="hljs-number">0</span>) &#123;<br>                ans.<span class="hljs-built_in">pop_back</span>();<br>                res--;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ans.<span class="hljs-built_in">size</span>() &lt; x) &#123;<br>                ans.<span class="hljs-built_in">push_back</span>(nums[i]);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 若已取满则直接丢弃</span><br>                res--; <br>            &#125;   <br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; nums1, vector&lt;<span class="hljs-type">int</span>&gt; nums2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-type">int</span> len1 = nums1.<span class="hljs-built_in">size</span>(), len2 = nums2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">// 确保nums1和nums2无遗漏地追加入ans</span><br>        nums1.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">-1</span>);<br>        nums2.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">-1</span>);<br>        <span class="hljs-comment">// lexicographical_compare用于字典序比较</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;;) &#123;<br>            <span class="hljs-type">bool</span> cmp = <span class="hljs-built_in">lexicographical_compare</span>(nums1.<span class="hljs-built_in">begin</span>() + i, nums1.<span class="hljs-built_in">end</span>() - <span class="hljs-number">1</span>, nums2.<span class="hljs-built_in">begin</span>() + j, nums2.<span class="hljs-built_in">end</span>() - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (!cmp &amp;&amp; i &lt; len1) &#123;<br>                ans.<span class="hljs-built_in">push_back</span>(nums1[i]);<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp &amp;&amp; j &lt; len2) &#123;<br>                ans.<span class="hljs-built_in">push_back</span>(nums2[j]);<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">maxNumber</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-type">int</span> len1 = nums1.<span class="hljs-built_in">size</span>(), len2 = nums2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">// 限定nums1能够取到的个数</span><br>        <span class="hljs-type">int</span> min1 = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, k - len2), max1 = <span class="hljs-built_in">min</span>(k, len1);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = min1; i &lt;= max1; i++) &#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt; tmp = <span class="hljs-built_in">merge</span>(<span class="hljs-built_in">maxSequence</span>(nums1, i), <span class="hljs-built_in">maxSequence</span>(nums2, k - i));<br>            <span class="hljs-keyword">if</span> (tmp &gt; ans) ans = tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="34-Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#34-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="34. Find First and Last Position of Element in Sorted Array"></a><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">34. Find First and Last Position of Element in Sorted Array</a></h3><p>直接二分即可，只需要注意在找开始位置的时候，中点等于目标值时还需要继续向左搜；同样的，在找结束位置时，中点等于目标值时还需要继续向右搜。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">protected</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt; ans = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-type">int</span> left, right, mid;<br>    <span class="hljs-comment">// 图方便也可以直接lower_bound,upper_bound</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">searchStart</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, <span class="hljs-type">int</span> target)</span></span><br><span class="hljs-function">    </span>&#123;<br>        left = <span class="hljs-number">0</span>, right = len - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right)<br>        &#123;<br>            mid = (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] == target)<br>            &#123;<br>                ans[<span class="hljs-number">0</span>] = mid;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>            &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">searchEnd</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, <span class="hljs-type">int</span> target)</span></span><br><span class="hljs-function">    </span>&#123;<br>        left = <span class="hljs-number">0</span>, right = len - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right)<br>        &#123;<br>            mid = (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] == target)<br>            &#123;<br>                ans[<span class="hljs-number">1</span>] = mid;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>            &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">searchRange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, <span class="hljs-type">int</span> target)</span></span><br><span class="hljs-function">    </span>&#123;<br>        len = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">searchStart</span>(nums, target);<br>        <span class="hljs-built_in">searchEnd</span>(nums, target);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="767-Reorganize-String"><a href="#767-Reorganize-String" class="headerlink" title="767. Reorganize String"></a><a href="https://leetcode-cn.com/problems/reorganize-string/">767. Reorganize String</a></h3><p>初步的想法：对于每一个字母，统计出现的频次，若某个字母的出现的频次超过阈值则返回空串，否则可以生成新的字符串。然后以频次降序生成优先队列，每次取出频次最大的两个字母追加入新字符串中。</p><p>直接上代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-type">int</span> count[<span class="hljs-number">26</span>]; <span class="hljs-comment">// 用于记录字母出现的频率</span><br>    <span class="hljs-type">int</span> maxl;<br>    <span class="hljs-comment">// 阈值</span><br>    <span class="hljs-comment">// 对于奇数，比如5，如果一个字母出现超过（5+1）/2=3次则不可能生成新字符串</span><br>    <span class="hljs-comment">// 对于偶数，比如6，如果一个字母出现超过 6/2=3次则不可能生成新字符串</span><br>    string newS; <span class="hljs-comment">// 生成的新字符串</span><br>    priority_queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">char</span>&gt;&gt; q;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">reorganizeString</span><span class="hljs-params">(string S)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> len = S.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (len % <span class="hljs-number">2</span>)<br>            maxl = (len + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">else</span><br>            maxl = len / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>        &#123;<br>            count[S[i] - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>            <span class="hljs-keyword">if</span> (count[S[i] - <span class="hljs-string">&#x27;a&#x27;</span>] &gt; maxl)<br>                <span class="hljs-keyword">return</span> newS;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (count[i] &gt; <span class="hljs-number">0</span>)<br>                q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(count[i], i + <span class="hljs-string">&#x27;a&#x27;</span>));<br>        &#125;<br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">char</span>&gt; cur1, cur2;<br>            <span class="hljs-comment">// 每次取数目最多的两个字母追加入newS</span><br>            <span class="hljs-keyword">if</span> (q.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>)<br>            &#123;<br>                cur1 = q.<span class="hljs-built_in">top</span>();<br>                newS += cur1.second;<br>                cur1.first--;<br>                q.<span class="hljs-built_in">pop</span>();<br>                cur2 = q.<span class="hljs-built_in">top</span>();<br>                newS += cur2.second;<br>                cur2.first--;<br>                q.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span> (cur1.first &gt; <span class="hljs-number">0</span>)<br>                    q.<span class="hljs-built_in">push</span>(cur1);<br>                <span class="hljs-keyword">if</span> (cur2.first &gt; <span class="hljs-number">0</span>)<br>                    q.<span class="hljs-built_in">push</span>(cur2);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                cur1 = q.<span class="hljs-built_in">top</span>();<br>                q.<span class="hljs-built_in">pop</span>();<br>                newS += cur1.second;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> newS;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;&lt;em&gt;每日一题是不可能真的每日一题的，也就诓诓自己罢了&lt;/em&gt;&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;321-Create-Maximum-Number&quot;&gt;&lt;a href=&quot;#321-Create-Maxim</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭坑笔记</title>
    <link href="http://example.com/2020/11/27/Hexo%E6%90%AD%E5%9D%91%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/11/27/Hexo%E6%90%AD%E5%9D%91%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-27T11:51:36.000Z</published>
    <updated>2020-11-29T06:51:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>本篇主要用于记录由于<del>重度拖延症</del>各种各样的原因原本计划年初动工却直到年底我才开始搭建博客的踩坑经历</em></p></blockquote><p>整体搭建过程参考<a href="https://zhuanlan.zhihu.com/p/26625249">这篇文章</a>，Hexo主题样式来自RandomYang设计的<a href="https://www.randomyang.top/2019/12/01/hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E3%80%8Cpaper%E3%80%8D%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91/">Paper</a>，<del>过于好看直接打压了我的消极怠工情绪，</del>题图ID&#x3D;78862613。</p><p>以下是<del>自弹自唱</del>自问自答：</p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>Q：在<strong>安装Hexo</strong>的时候，执行<code>hexo init blog</code>命令后报错：’hexo’不是内部或外部命令，也不是可运行的程序。  </p><p>A：检查系统环境变量配置，将hexo的安装目录加入系统变量的Path中。</p><hr><p>Q：在<strong>修改<code>_config.yml</code>配置文件</strong>的时候，因为用了一对’’’进行注释，执行<code>hexo g</code>命令后报错。</p><p>A：<del>虽然很蠢但是</del>删掉就好啦。BTW，yml不支持多行注释。</p><hr><p>Q：页脚添加访客人数和总访问量。</p><p>A：实现参考<a href="https://chrischen0405.github.io/2018/09/11/post20180911/">这篇博客</a>。因为我用的主题是Paper，所以需要修改<code>\themes\paper\layout\includes</code>目录下的<code>footer.pug</code>文件。因为完全不会写pug，所以找了一个<a href="http://html2jade.org/">HTML转PUG</a>的小工具。</p><p>在<code>copyright</code>信息前加入以下代码即可：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c">script(async=&#x27;&#x27; src=&#x27;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&#x27;)<br>  span<span class="hljs-meta">#busuanzi_container_site_pv</span><br>    <span class="hljs-string">| 本站总访问量</span><br>    span<span class="hljs-meta">#busuanzi_value_site_pv</span><br>    <span class="hljs-string">| 次</span><br>  span.post-meta-divider <span class="hljs-string">|</span><br>  span<span class="hljs-meta">#busuanzi_container_site_uv</span><br>    <span class="hljs-string">| 本站访客数</span><br>    span<span class="hljs-meta">#busuanzi_value_site_uv</span><br>    <span class="hljs-string">| 人 </span><br></code></pre></td></tr></table></figure><hr><p>Q：在<strong>设置SSH免密使用<code>hexo d</code>命令</strong>时，在<code>\blog\.deploy_git</code>目录下执行<code>git remote -v</code>命令用于查看当前传输协议后无显示。</p><p>A：参考<a href="https://blog.csdn.net/hhgggggg/article/details/77853665">这篇博客</a>，不再赘述。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;本篇主要用于记录由于&lt;del&gt;重度拖延症&lt;/del&gt;各种各样的原因原本计划年初动工却直到年底我才开始搭建博客的踩坑经历&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;整体搭建过程参考&lt;a href=&quot;https://zhuanlan.</summary>
      
    
    
    
    
    <category term="Blog搭建" scheme="http://example.com/tags/Blog%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
